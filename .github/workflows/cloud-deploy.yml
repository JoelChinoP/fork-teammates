# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deploy

on:
  push:
    branches:
      - deploy
    paths:
      - ".github/workflows/cloud-deploy.yml"
      - ".github/workflows/build-backend.yml"
      - ".github/workflows/build-frontend.yml"
      - ".github/workflows/build-dependencies.yml"

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-backend:
    uses: ./.github/workflows/build-backend.yml

  build-frontend:
    uses: ./.github/workflows/build-frontend.yml

  build-dependencies:
    uses: ./.github/workflows/build-dependencies.yml

  deploy-dependencies:
    runs-on: ubuntu-latest
    environment: google-vps
    needs: build-dependencies

    steps:
      - name: Restore datastore and solr image tars
        uses: actions/cache@v4
        with:
          path: |
            datastore-image.tar
            solr-image.tar
          key: deps-${{ github.sha }}

      - name: Create the .ssh directory and set the private key from the secret
        run: |
          mkdir -p ~/.ssh && echo "${{ secrets.VPS_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key

      - name: Deploy dependencies on VPS via SSH
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          # Copy tars and index.yaml to the VPS
          scp -i ~/.ssh/key -o StrictHostKeyChecking=no datastore-image.tar solr-image.tar $VPS_USER@$VPS_HOST:~
          scp -i ~/.ssh/key -o StrictHostKeyChecking=no ./src/main/appengine/index.yaml $VPS_USER@$VPS_HOST:~/index.yaml

          # Connect to the VPS using SSH and execute the deployment script
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST bash <<'EOF'

            # Delete the old containers if they exist
            sudo docker ps -q --filter "publish=8484" | xargs -r sudo docker stop | xargs -r sudo docker rm
            sudo docker ps -q --filter "publish=8983" | xargs -r sudo docker stop | xargs -r sudo docker rm

            # Delete the old images if they exist
            sudo docker images -q datastore:gha-cache | xargs -r sudo docker rmi -f
            sudo docker images -q solr:gha-cache | xargs -r sudo docker rmi -f

            # Load the new datastore and solr images
            sudo docker load -i ~/datastore-image.tar
            sudo docker load -i ~/solr-image.tar

            # Run the datastore and solr containers
            sudo docker run -d \
              -v ~/src/main/appengine/index.yaml:/root/.config/gcloud/emulators/datastore/WEB-INF/index.yaml \
              -p 8484:8484 \
              --name datastore datastore:gha-cache

            sudo docker run -d -p 8983:8983 --name solr solr:gha-cache
          EOF

  deploy-backend:
    runs-on: ubuntu-latest
    environment: google-vps
    needs: [build-backend, deploy-dependencies]

    steps:
      - name: Restore backend image tar
        uses: actions/cache@v4
        with:
          path: backend-image.tar
          key: backend-${{ github.sha }}

      - name: Connect to VPS with SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.VPS_KEY }}" > ~/.ssh/private
          chmod 600 ~/.ssh/private
          ssh -i ~/.ssh/private -o "StrictHostKeyChecking no" "${{secrets.VPS_USER}}"@$"${{secrets.VPS_HOST}}"
      - run: exit

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: google-vps
    needs: [build-frontend]

    steps:
      - name: Restore frontend image tar
        uses: actions/cache@v4
        with:
          path: frontend-image.tar
          key: frontend-${{ github.sha }}

      - name: Create the .ssh directory and set the private key from the secret
        run: |
          mkdir -p ~/.ssh && echo "${{ secrets.VPS_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key

      - name: Deploy frontend on VPS via SSH
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          # Copy the frontend image tar to the VPS
          scp -i ~/.ssh/key -o StrictHostKeyChecking=no frontend-image.tar $VPS_USER@$VPS_HOST:~

          # Connect to the VPS using SSH and execute the deployment script
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST bash <<'EOF'

            # Delete the old container if it exists
            sudo docker ps -q --filter "publish=4200" | xargs -r sudo docker stop | xargs -r sudo docker rm

            # Delete the old image if it exists
            sudo docker images -q teammates-frontend:gha-cache | xargs -r sudo docker rmi -f

            # Load the new frontend image and run it
            sudo docker load -i ~/frontend-image.tar
            sudo docker run -d -p 4200:4200 --name frontend teammates-frontend:gha-cache
          EOF
