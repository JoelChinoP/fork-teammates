# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deploy

on:
  push:
    branches:
      - deploy
    paths:
      - ".github/workflows/cloud-deploy.yml"
      - ".github/workflows/build-backend.yml"
      - ".github/workflows/build-frontend.yml"
      - ".github/workflows/build-dependencies.yml"

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-backend:
    uses: ./.github/workflows/build-backend.yml

  build-frontend:
    uses: ./.github/workflows/build-frontend.yml

  build-dependencies:
    uses: ./.github/workflows/build-dependencies.yml

  deploy-dependencies:
    runs-on: ubuntu-latest
    environment: google-vps
    needs: build-dependencies

    steps:
      - uses: actions/checkout@v4

      - name: Restore datastore image tar
        uses: actions/cache@v4
        with:
          path: datastore-image.tar
          key: datastore-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Restore solr image tar
        uses: actions/cache@v4
        with:
          path: solr-image.tar
          key: solr-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Create the .ssh directory and set the private key from the secret
        run: |
          mkdir -p ~/.ssh && echo "${{ secrets.VPS_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key

      - name: Deploy dependencies on VPS via SSH
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          # Create dependencies directory on VPS
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "mkdir -p ~/dependencies"

          # Copy tars and index.yaml to the VPS, all from dependencies/
          scp -i ~/.ssh/key -o StrictHostKeyChecking=no datastore-image.tar solr-image.tar $VPS_USER@$VPS_HOST:~/dependencies/
          scp -i ~/.ssh/key -o StrictHostKeyChecking=no ./src/main/appengine/index.yaml $VPS_USER@$VPS_HOST:~/dependencies/

          # Connect to the VPS using SSH and execute the deployment script
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST bash <<'EOF'
            # Delete the old containers if they exist
            sudo docker ps -q --filter "publish=8484" | xargs -r sudo docker stop | xargs -r sudo docker rm
            sudo docker ps -q --filter "publish=8983" | xargs -r sudo docker stop | xargs -r sudo docker rm

            # Delete the old images if they exist
            sudo docker images -q datastore:gha-cache | xargs -r sudo docker rmi -f
            sudo docker images -q solr:gha-cache | xargs -r sudo docker rmi -f

            # Load the new datastore and solr images
            sudo docker load -i ~/dependencies/datastore-image.tar
            sudo docker load -i ~/dependencies/solr-image.tar

            # Run the datastore and solr containers
            sudo docker run -d \
              -v ~/dependencies/index.yaml:/root/.config/gcloud/emulators/datastore/WEB-INF/index.yaml \
              -p 8484:8484 \
              --name datastore datastore:gha-cache
            sudo docker run -d -p 8983:8983 --name solr solr:gha-cache
          EOF

  deploy-backend:
    runs-on: ubuntu-latest
    environment: google-vps
    needs: [build-backend, deploy-dependencies]

    steps:
      - name: Restore backend image tar
        uses: actions/cache@v4
        with:
          path: backend-image.tar
          key: backend-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Create the .ssh directory and set the private key from the secret
        run: |
          mkdir -p ~/.ssh && echo "${{ secrets.VPS_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key

      - name: Deploy backend on VPS via SSH
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          # Create backend directory on VPS
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "mkdir -p ~/backend"

          # Copy the backend image tar to the VPS
          scp -i ~/.ssh/key -o StrictHostKeyChecking=no backend-image.tar $VPS_USER@$VPS_HOST:~/backend/

          # Connect to the VPS using SSH and execute the deployment script
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST bash <<'EOF'
            # Delete the old container if it exists
            sudo docker ps -q --filter "publish=8080" | xargs -r sudo docker stop | xargs -r sudo docker rm

            # Delete the old image if it exists
            sudo docker images -q teammates-backend:gha-cache | xargs -r sudo docker rmi -f

            # Load the new backend image and run it
            sudo docker load -i ~/backend/backend-image.tar
            sudo docker run -d -p 8080:8080 --name backend teammates-backend:gha-cache
          EOF

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: google-vps
    needs: [build-frontend]

    steps:
      - name: Restore frontend image tar
        uses: actions/cache@v4
        with:
          path: frontend-image.tar
          key: frontend-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Create the .ssh directory and set the private key from the secret
        run: |
          mkdir -p ~/.ssh && echo "${{ secrets.VPS_KEY }}" > ~/.ssh/key
          chmod 600 ~/.ssh/key

      - name: Deploy frontend on VPS via SSH
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
        run: |
          # Create frontend directory on VPS
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "mkdir -p ~/frontend"

          # Copy the frontend image tar to the VPS
          scp -i ~/.ssh/key -o StrictHostKeyChecking=no frontend-image.tar $VPS_USER@$VPS_HOST:~/frontend/

          # Connect to the VPS using SSH and execute the deployment script
          ssh -i ~/.ssh/key -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST bash <<'EOF'
            # Delete the old container if it exists
            sudo docker ps -q --filter "publish=4200" | xargs -r sudo docker stop | xargs -r sudo docker rm

            # Delete the old image if it exists
            sudo docker images -q teammates-frontend:gha-cache | xargs -r sudo docker rmi -f

            # Load the new frontend image and run it
            sudo docker load -i ~/frontend/frontend-image.tar
            sudo docker run -d -p 4200:4200 --name frontend teammates-frontend:gha-cache
          EOF
